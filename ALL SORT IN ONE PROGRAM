 import java.util.Arrays;
 import java.util.Scanner;
public  class mainsort
{
    public static void main(String[] args)
    {
      Scanner s=new Scanner(System.in);
      System.out.println("ENTER ARRAY SIZE:");
      int n = s.nextInt();
      int a[] = new int[n];
      System.out.println("ENTER ARRAY ELEMENTS:");
      for(int i=0;i<n;i++)
      {
          a[i]=s.nextInt();
      }
      int array[]=a.clone();        //copying the array elements
      mainsort t=new mainsort();

      t.bubblesort(array);
      System.out.println("BUBBLESORT ELEMENTS ARE:"+Arrays.toString(array));
      t.selectionsort(array);
      System.out.println("SELECTIONSORT ELEMENTS ARE:"+Arrays.toString(array));
      t.insertionsort(array);
      System.out.println("INSERTIONSORT ELEMENTS ARE:"+Arrays.toString(array));
      t.insertionbackwardchecksort(array);
      System.out.println("INSERTIONSORT ELEMENTS(BACKWARD SEARCH) ARE:"+Arrays.toString(array));
      t.quicksortFE(array,0,array.length-1);
      System.out.println("QUICKSORT (FE) ELEMENTS ARE:"+Arrays.toString(array));
      t.quicksortLE(array,0,array.length-1);
      System.out.println("QUICKSORT (LE) ELEMENTS ARE:"+Arrays.toString(array));
      t.quicksortME(array,0,array.length-1);
      System.out.println("QUICKSORT (ME) ELEMENTS ARE:"+Arrays.toString(array));
      t.quicksort3(array,0,array.length-1);
      System.out.println("QUICKSORT 3 ELEMENTS ARE:"+Arrays.toString(array));
      t.mergesort(array,0,array.length-1);
      System.out.println("MERGESORT ELEMENTS ARE:"+Arrays.toString(array));
      t.heapsort(array);
      System.out.println("HEAPSORTELEMENTS ARE:"+Arrays.toString(array));
      t.shellsort(array);
      System.out.println("SHELLSORTELEMENTS ARE:"+Arrays.toString(array));
      t.countsort(array);
      System.out.println("COUNTSORTELEMENTS ARE:"+Arrays.toString(array));
      t.radixsort(array,n);
      System.out.println("RADIXSORTELEMENTS ARE:"+Arrays.toString(array));
      for(int i=0;i<a.length;i++)
      {
      System.out.print(a[i]+" ");
      }  
    }   
    public void bubblesort(int a[])
    { 
        int t=0;
        for (int i=0;i<a.length-1;i++)
        {
            for(int j=i+1;j<a.length;j++)
             {
                   if(a[i]>a[j])
                {
                    t=a[i];
                    a[i]=a[j];
                    a[j]=t;
               } 
            }
        }
    }

    public void selectionsort(int a[])
    {
        int i,j,t=0;
        for(i=0;i<a.length;i++)
        {
            int min=i;
            for(j=i+1;j<a.length;j++)
            {
            if(a[j]<a[min])
            {
                min=j;
            }
            t=a[min];
            a[min]=a[i];
            a[i]=t;
            }
        }
    }

    public void insertionsort(int a[])
    {
        for(int i=1;i<a.length;i++)
        {
            int j,tbi=a[i];
            for(j=i-1;j>=0 && a[j]>tbi;j--)
            {
                a[j+1]=a[j];
            }
            a[j+1]=tbi;
        }
    }

    public  void insertionbackwardchecksort(int a[])
     {
        for(int i=a.length-1;i>=0;i--)
        {
            int j,tbi=a[i];
            for(j=i+1;j<a.length && tbi>a[j];j++)
            {
                a[j-1]=a[j];
            }
            a[j-1]=tbi;
        }
     }

    public void quicksortFE(int a[],int l,int r)
     {
         int t,i=r,j;
         int pv=a[l];
         if(l<r)
         {
             for(j=r;j>l;j--)
             {
                 if(pv<=a[j])
                 {
                     t=a[i];
                     a[i]=a[j];
                     a[j]=t;
                     i--;
                }
             }
             t=a[i];
             a[i]=a[l];
             a[l]=t;
             quicksortFE(a,l,i-1);
             quicksortFE(a,i+1,r);
        }
     }

    public  void quicksortLE(int a[],int l,int r)
      {
        int t,i=l,j;
        int pv=a[r];
        if(l<r)
       {
             for(j=l;j<r;j++)
             {
                 if(pv>a[j])
                 {
                      t=a[i];
                      a[i]=a[j];
                      a[j]=t;
                      i++;
                     }
                 }
                 t=a[i];
                 a[i]=a[r];
                 a[r]=t;
                 quicksortLE(a,l,i-1);
                 quicksortLE(a,i+1,r);
             }
        }

    public  void quicksortME(int a[],int l,int r)
    {
        int m=l+(r-l)/2;
        int pv=a[m];
        int i=l,j=r;
        if(l<r)
        {
            while(pv>a[i] && i<r)
            {
                i++;
            }
            while(pv<a[j] && j>l)
            {
                j--;
            }
            if(i<=j)
            {
            int t=a[i];
            a[i]=a[j];
            a[j]=t;
            i++;
            j--;
            }
            quicksortME(a,l,j);
            quicksortME(a,i,r);
        }
    }

    public   void quicksort3(int[] a, int low, int high)  {
        if (low>=high) //1 or 0 elements  
           return;  
       IrefValues iobject = new IrefValues(0);
       JrefValues jobject = new JrefValues(0);
       partition(a, low, high, iobject,jobject); 
       quicksort3(a, low, iobject.i);  
       quicksort3(a, jobject.j, high);
   }
   public  void partition(int[] a, int low, int high,IrefValues iobj, JrefValues jobj)  
   {  
       if (high - low <= 1)  
       {  
           if (a[high] < a[low])  
               {
                   int temp = a[high];
                   a[high]= a[low];
                   a[low]= temp;
               }  
      iobj.i = low; jobj.j = high;  return;  
       }  
       int mid = low;  int pivot = a[high];  
       while (mid <= high)  
       {  
           if (a[mid]<pivot)  
           {
               int temp = a[low];
               a[low]=a[mid];
               a[mid] = temp;
               low++;mid++;
           }
           else if (a[mid]==pivot) 
           {
               mid++;  
           }
           else if (a[mid]>pivot)  
           {
               int temp = a[mid];
               a[mid]=a[high];
               a[high]= temp;
               high--;
           }
       }   
       iobj.i = low-1;  jobj.j = mid; //or high-1  
   }
   int i=0;
   public  void IrefValues(int i)
   {
      this.i =i;
    }
   int j = 0;
   public  void JrefValues(int j)
   {
      this.j =j;
    }

   public  void merge(int a[], int l, int m, int r) 
    { 
        int n1 = m - l + 1; 
        int n2 = r - m; 
        int L[] = new int[n1]; 
        int R[] = new int[n2]; 
        for (int i = 0; i < n1; ++i) 
        {
            L[i] = a[l + i]; 
        }
        for (int j = 0; j < n2; ++j) 
        {
            R[j] = a[m + 1 + j]; 
        }
        int i = 0, j = 0; 
        int k = l; 
        while (i < n1 && j < n2) { 
            if (L[i] <= R[j]) { 
                a[k++] = L[i++];
            } 
            else { 
                a[k++] = R[j++]; 
            } 
        } 
        while (i < n1) { 
            a[k++] = L[i++]; 
        } 
        while (j < n2) { 
            a[k++] = R[j++]; 
        } 
    } 
    public  void mergesort(int a[], int l, int r) 
    { 
        if (l < r) { 
            int m = (l + r) / 2; 
            mergesort(a, l, m); 
            mergesort(a, m + 1, r); 
            merge(a, l, m, r); 
        } 
    } 

    public  void maxheap(int a[],int m ,int i)
    {
        {
            int left=2*i+1;
            int right=2*i+2;
            int bc=left;
            if(right<=m-1 && a[left]<a[right])
            {
                bc=right;
            }
            if(a[bc]>a[i])
            {
                int t=a[i];
                a[i]=a[bc];
                a[bc]=t;
            }
        }
    }
    public  void heapsort(int a[])
    { 
        int m=a.length;
        for(int j=m;j>1;j--)
        {
            for(int i=j/2-1;i>=0;i--)
            {
                maxheap(a,j,i);
            }
            int t=a[j-1];
            a[j-1]=a[0];
            a[0]=t;
        }
    }
    public  void shellsort(int a[]) 
    { 
        int n = a.length; 
        for (int gap = n/2; gap > 0; gap /= 2) 
        { 
            for (int i = gap; i < n; i++) 
            { 
                int temp = a[i]; 
                int j; 
                for (j = i; j >= gap && a[j - gap] > temp; j -= gap) 
                {
                    a[j] = a[j - gap]; 
                }
                a[j] = temp; 
            } 
        }  
    }

    public  int getMax(int a[], int n) 
    { 
        int mx = a[0]; 
        for (int i = 1; i < n; i++) 
            if (a[i] > mx) 
                mx = a[i]; 
        return mx; 
    }  
    public  void countSort(int a[], int n, int exp) 
    { 
        int output[] = new int[n]; 
        int i; 
        int count[] = new int[10]; 
        Arrays.fill(count,0); 
        for (i = 0; i < n; i++)
        {
            count[ (a[i]/exp)%10 ]++;  
        }
        for (i = 1; i < 10; i++) 
        {
            count[i] += count[i - 1]; 
        }
        for (i = n - 1; i >= 0; i--) 
        { 
            output[count[ (a[i]/exp)%10 ] - 1] = a[i]; 
            count[ (a[i]/exp)%10 ]--; 
        } 
        for (i = 0; i < n; i++) 
            a[i] = output[i]; 
    } 
    public  void radixsort(int a[], int n) 
    {
        int m = getMax(a, n); 
        for (int exp = 1; m/exp > 0; exp *= 10) 
            countSort(a, n, exp); 
    } 

    public void countsort(int[] a)  
    { 
        int max = Arrays.stream(a).max().getAsInt(); 
        int min = Arrays.stream(a).min().getAsInt(); 
        int range = max - min + 1; 
        int count[] = new int[range]; 
        int output[] = new int[a.length]; 
        for (int i = 0; i < a.length; i++)  
        { 
            count[a[i] - min]++; 
        } 
  
        for (int i = 1; i < count.length; i++)  
        { 
            count[i] += count[i - 1]; 
        } 
  
        for (int i = a.length - 1; i >= 0; i--)  
        { 
            output[count[a[i] - min] - 1] = a[i]; 
            count[a[i] - min]--; 
        } 
  
        for (int i = 0; i < a.length; i++) 
        { 
            a[i] = output[i]; 
        } 
    } 
}
          



